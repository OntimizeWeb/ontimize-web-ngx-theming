@import 'node_modules/@angular/material/theming';
@import './fashion/typography-fashion.scss';
@import './fashion/variables.scss';

/*Application background-color*/
$app-background-color: #eaeaea;
/*Sidenav background-color*/
$sidenav-background-color: #f5f5f5;

// Background palette for light themes.
@function fashion-light-theme-background($primary, $mat-theme) {
  $primary-500: mat-color($primary, 500);
  $background: map-get($mat-theme, background);
  @return map_merge($background,
    (level-0: mix($app-background-color, $primary-500, 98%),
      level-04: #f2f2f2,
      level-06: #f6f6f6,
      level-08: #fafafa,
      level-1: white,
      sidenav-overlay: #525252,
      status-bar: mix($sidenav-background-color, mat-color($primary), 97.2%),
      app-bar: mix($sidenav-background-color, mat-color($primary), 97.2%),
      background: mix($app-background-color, mat-color($primary), 97.2%)));
}

// Background palette for dark themes.
@function fashion-dark-theme-background($primary, $mat-theme) {
  $primary-500: mat-color($primary, 500);
  $background: map-get($mat-theme, background);
  @return map_merge($background,
    (level-0: mix(#171717, $primary-500, 94%),
      level-04: mix(#1E1E1E, $primary-500, 94%),
      level-06: mix(#2C2C2C, $primary-500, 94%),
      level-08: mix(#333333, $primary-500, 94%),
      level-1: mix(#383838, $primary-500, 94%),
      sidenav-overlay: #525252,
      status-bar: mix(#272727, $primary-500, 94%)));
}

// Foreground palette for light themes.
$fashion-light-theme-foreground: (base: rgba(black, 0.6),
  divider: rgba(black, 0.12),
  dividers: rgba(black, 0.12),
  disabled: rgba(black, 0.38),
  disabled-button: rgba(black, 0.38),
  disabled-text: rgba(black, 0.38),
  elevation: black,
  hint-text: rgba(black, 0.38),
  secondary-text: rgba(black, 0.54),
  title: rgba(black, 0.87),
  icon: rgba(black, 0.6),
  icons: rgba(black, 0.6),
  text: rgba(black, 0.87),
  slider-min: rgba(black, 0.38),
  slider-off: rgba(black, 0.38),
  slider-off-active: rgba(black, 0.38),
  button: rgba(black, 0.74));

// Foreground palette for dark themes.
$fashion-dark-theme-foreground: (base: rgba(white, 0.6),
  divider: rgba(white, 0.12),
  dividers: rgba(white, 0.12),
  disabled: rgba(white, 0.38),
  disabled-button: rgba(white, 0.38),
  disabled-text: rgba(white, 0.38),
  elevation: black,
  hint-text: rgba(white, 0.38),
  secondary-text: rgba(white, 0.54),
  title: rgba(white, 0.87),
  icon: rgba(white, 0.6),
  icons: rgba(white, 0.6),
  text: rgba(white, 0.87),
  slider-min: rgba(white, 0.38),
  slider-off: rgba(white, 0.38),
  slider-off-active: rgba(white, 0.38),
  button: rgba(white, 0.74));


// Creates a container object for a light theme to be given to individual component theme mixins.
@function fashion-mat-light-theme($primary, $accent, $warn: mat-palette($mat-red)) {
  $mat-theme: mat-light-theme($primary, $accent, $warn);
  @return (primary: $primary,
    accent: $accent,
    warn: $warn,
    is-dark: false,
    foreground: $fashion-light-theme-foreground,
    background: fashion-light-theme-background($primary, $mat-theme));
}

// Creates a container object for a dark theme to be given to individual component theme mixins.
@function fashion-mat-dark-theme($primary, $accent, $warn: mat-palette($mat-red)) {
  $mat-theme: mat-dark-theme($primary, $accent, $warn);
  @return (primary: $primary,
    accent: $accent,
    warn: $warn,
    is-dark: true,
    foreground: $fashion-dark-theme-foreground,
    background: fashion-dark-theme-background($primary, $mat-theme));
}

@mixin mat-checkbox-theme($theme) {
  $is-dark-theme: map-get($theme, is-dark);
  $primary: map-get($theme, primary);
  $accent: map-get($theme, accent);
  $warn: map-get($theme, warn);
  $background: map-get($theme, background);
  $foreground: map-get($theme, foreground);

  // The color of the checkbox's checkmark / mixedmark.
  $checkbox-mark-color: mat-color($background, background);

  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,
  // this does not work well with elements layered on top of one another. To get around this we
  // blend the colors together based on the base color and the theme background.
  $white-30pct-opacity-on-dark: #686868;
  $black-26pct-opacity-on-light: #b0b0b0;
  $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);
  $checkbox-background-color: if($is-dark-theme, $black-26pct-opacity-on-light, mat-color($background, sidenav-overlay));

  .mat-checkbox-frame {
    border-color: mat-color($foreground, secondary-text);
  }

  .mat-checkbox-checkmark {
    fill: $checkbox-mark-color;
  }

  .mat-checkbox-checkmark-path {
    // !important is needed here because a stroke must be set as an
    // attribute on the SVG in order for line animation to work properly.
    stroke: $checkbox-mark-color !important;

    @include cdk-high-contrast(black-on-white) {
      // Having the one above be !important ends up overriding the browser's automatic
      // color inversion so we need to re-invert it ourselves for black-on-white.
      stroke: #000 !important;
    }
  }

  .mat-checkbox-mixedmark {
    background-color: $checkbox-mark-color;
  }

  .mat-checkbox-checked,
  .mat-checkbox-indeterminate {
    &.mat-primary .mat-checkbox-background {
      background-color: $checkbox-background-color;
    }

    &.mat-accent .mat-checkbox-background {
      background-color: $checkbox-background-color;
    }

    &.mat-warn .mat-checkbox-background {
      background-color: mat-color($warn);
    }
  }

  .mat-checkbox-disabled {

    &.mat-checkbox-checked,
    &.mat-checkbox-indeterminate {
      .mat-checkbox-background {
        background-color: $disabled-color;
      }
    }

    &:not(.mat-checkbox-checked) {
      .mat-checkbox-frame {
        border-color: $disabled-color;
      }
    }

    .mat-checkbox-label {
      color: mat-color($foreground, secondary-text);
    }

    @include cdk-high-contrast {
      opacity: .5;
    }
  }

  // This one is moved down here so it can target both
  // the theme colors and the disabled state.
  @include cdk-high-contrast {
    .mat-checkbox-background {
      // Needs to be removed because it hides the checkbox outline.
      background: none;
    }
  }

  // Switch this to a solid color since we're using `opacity`
  // to control how opaque the ripple should be.
  .mat-checkbox .mat-ripple-element {
    background-color: map_get(map-get($theme, foreground), base);
  }

  .mat-checkbox-checked:not(.mat-checkbox-disabled),
  .mat-checkbox:active:not(.mat-checkbox-disabled) {
    &.mat-primary .mat-ripple-element {
      background: mat-color($foreground, icon);
    }

    &.mat-accent .mat-ripple-element {
      background: mat-color($foreground, icon);
    }

    &.mat-warn .mat-ripple-element {
      background: mat-color($warn);
    }
  }
}

@mixin mat-pseudo-checkbox-theme($theme) {
  $is-dark-theme: map-get($theme, is-dark);
  $primary: map-get($theme, primary);
  $accent: map-get($theme, accent);
  $warn: map-get($theme, warn);
  $background: map-get($theme, background);
  $foreground: map-get($theme, foreground);

  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,
  // this does not work well with elements layered on top of one another. To get around this we
  // blend the colors together based on the base color and the theme background.
  $white-30pct-opacity-on-dark: #686868;
  $black-26pct-opacity-on-light: #b0b0b0;
  $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);
  $colored-box-selector: '.mat-pseudo-checkbox-checked, .mat-pseudo-checkbox-indeterminate';

  .mat-pseudo-checkbox {
    color: mat-color(map-get($theme, foreground), secondary-text);

    &::after {
      color: mat-color($background, background);
    }
  }

  .mat-pseudo-checkbox-disabled {
    color: $disabled-color;
  }

  .mat-primary .mat-pseudo-checkbox-checked,
  .mat-primary .mat-pseudo-checkbox-indeterminate {
    background: mat-color($foreground, icon);
  }

  // Default to the accent color. Note that the pseudo checkboxes are meant to inherit the
  // theme from their parent, rather than implementing their own theming, which is why we
  // don't attach to the `mat-*` classes. Also note that this needs to be below `.mat-primary`
  // in order to allow for the color to be overwritten if the checkbox is inside a parent that
  // has `mat-accent` and is placed inside another parent that has `mat-primary`.
  .mat-accent .mat-pseudo-checkbox-checked,
  .mat-accent .mat-pseudo-checkbox-indeterminate,
  .mat-pseudo-checkbox-checked,
  .mat-pseudo-checkbox-indeterminate {
    background: mat-color($foreground, icon);
  }

  .mat-warn .mat-pseudo-checkbox-checked,
  .mat-warn .mat-pseudo-checkbox-indeterminate {
    background: mat-color(map-get($theme, warn));
  }

  .mat-pseudo-checkbox-checked,
  .mat-pseudo-checkbox-indeterminate {
    &.mat-pseudo-checkbox-disabled {
      background: $disabled-color;
    }
  }
}

@mixin implatform-fashion-theme-styles($theme, $typography: null) {
  $current-typography: if($lite-typography == null, $default-typography, $lite-typography );

  @if $typography !=null {
    $typography: map-merge($current-typography, $typography);
  }

  @else {
    $typography: $current-typography;
  }

  @include mat-checkbox-theme($theme);
  @include mat-pseudo-checkbox-theme($theme);
  @include o-table-typography-fashion($typography);
  @include o-common-typography-fashion($typography);
  @include o-form-theme-fashion($typography);

  $background: map-get($theme, background);
  $foreground: map-get($theme, foreground);
  $primary: mat-color($theme, primary);
  $accent: mat-color($theme, accent);
  $warn: mat-color($theme, warn);
  $is-dark-theme: map-get($theme, is-dark);
  $background-primary-button: if($is-dark-theme, transparent, #ffffff);
  $background-hover-primary-button: if($is-dark-theme, mat-color($primary, 500, 0.04), mat-color($primary, 100));
  $background-accent-button: if($is-dark-theme, transparent, #ffffff);
  $background-hover-accent-button: if($is-dark-theme, mat-color($accent, 500, 0.04), mat-color($accent, 100));
  $background-hover-warn-button: if($is-dark-theme, mat-color($warn, 500, 0.04), mat-color($warn, 100));
  $table-row-over-background: if($is-dark-theme, #ffffff1f, #f5f5f5);
  $table-row-selected-background: if($is-dark-theme, #f1f6fa80, #eaeaea);
  $sidenav-background-color: if($is-dark-theme, mix(#1e1e1e, mat-color($primary, 500), 94%), mat-color($background, status-bar));

  .o-app-header {
    nav {
      &.o-app-header-primary {
        background-color: $sidenav-background-color;
      }

      &.o-app-header-accent {
        background-color: $sidenav-background-color;
      }

      .o-app-header-title {
        color: mat-color($foreground, button);
      }
    }
  }

  .o-app-sidenav {
    font-weight: 400;

    .o-app-sidenav-menu-group,
    .o-app-sidenav-menu-item {
      a {
        margin-left: 0 !important;
        border-left: 8px solid transparent;
      }

      &:not([disabled='true']) {
        border-left-color: transparent;

        a:hover {
          color: mat-color($foreground, button);
          background-color: mix($sidenav-background-color, mat-color($background, sidenav-overlay), 96%); //#525252 4%
          border-left: 8px solid mat-color($primary);
        }

        a.o-app-sidenav-viewer-sidenav-item-selected {
          color: mat-color($foreground, button);
          background-color: mix($sidenav-background-color, mat-color($background, sidenav-overlay), 98%); //#525252 2%
          border-left: 8px solid mat-color($primary);
        }
      }
    }

    .o-app-sidenav-sidenav {
      background: $sidenav-background-color;

      .sidenav-toggle {
        color: mat-color($foreground, button);
      }

      .o-app-sidenav-item {
        color: mat-color($foreground, button);

        &.o-user-info {

          &:focus,
          &:hover {
            color: inherit;
          }

          color: inherit;

          .o-user-info-menu-item .o-user-info-item {
            background: mat-color($primary, default-contrast, 0.74);
          }
        }
      }

      /* Side Navigation Level Styles */
      .o-app-sidenav-menu-group-level-1 {
        .o-app-sidenav-menugroup {
          &.opened {
            +.o-app-sidenav-menugroup-items-container ul {
              background: mix($sidenav-background-color, mat-color($background, sidenav-overlay), 94%); //#525252 6%
            }
          }
        }

        .o-app-sidenav-menu-item {
          &:not([disabled='true']) {

            // a.o-app-sidenav-viewer-sidenav-item-selected,
            a:hover {
              background-color: mix($sidenav-background-color, mat-color($background, sidenav-overlay), 94%); //#525252 6%
            }
          }
        }
      }

      .o-app-sidenav-menu-group-level-2,
      .o-app-sidenav-menu-group-level-3,
      .o-app-sidenav-menu-group-level-4 {
        .o-app-sidenav-menugroup {
          &.opened {
            +.o-app-sidenav-menugroup-items-container ul {
              background: mix($sidenav-background-color, mat-color($background, sidenav-overlay), 88%); //#525252 12%
            }
          }
        }

        .o-app-sidenav-menu-item {
          &:not([disabled='true']) {

            // a.o-app-sidenav-viewer-sidenav-item-selected,
            a:hover {
              background-color: mix($sidenav-background-color, mat-color($background, sidenav-overlay), 88%); //#525252 12%
            }
          }
        }
      }

      li a {
        color: mat-color($foreground, text);
      }
    }

    .o-app-sidenav-container {
      .mat-drawer.o-app-sidenav-sidenav.mat-drawer-closed {
        nav {

          .o-app-sidenav-menu-group,
          .o-app-sidenav-menu-item {

            a {
              width: 100%;
              min-width: 100%;
              max-width: 100%;
            }
          }
        }
      }
    }
  }

  o-app-sidenav.o-app-sidenav,
  o-app-sidenav.o-app-sidenav.header-layout {
    .o-app-sidenav-container {
      .o-app-header {
        /*box-shadow: none;*/
        border-bottom: 1px solid mat-color($foreground, divider);
        background-color: $sidenav-background-color;
      }

      mat-sidenav.mat-drawer.o-app-sidenav-sidenav {
        box-shadow: none;
        border-right: none;

        .o-app-sidenav-menugroup.active+.o-app-sidenav-menugroup-items-container ul {
          box-shadow: none;
          background: none;
        }
      }
    }

    .mat-menu-panel {
      border: 1px solid mat-color($foreground, divider);

    }

    .o-app-header {
      .o-user-info {
        .o-user-info-wrapper {
          font-weight: 500;
          // color: white;
        }
      }
    }
  }


  .mat-tab-group .mat-tab-label.mat-tab-label-active {
    color: mat-color($foreground, title);
  }

  /* MAT PAGINATOR*/
  .mat-paginator {
    color: mat-color($foreground, text);
  }

  .ontimize-table.o-table {
    background: mat-color($background, card);

    tbody td.o-table-column-select-checkbox .mat-checkbox-inner-container .mat-checkbox-background,
    thead tr th.o-table-column-select-checkbox .mat-checkbox-inner-container .mat-checkbox-background {
      background-color: mat-color($foreground, icon);
    }
  }

  .o-table {

    .o-table-quickfilter .quickFilter .mat-form-field .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-prefix div {
      border-color: mat-color($foreground, text, 0.32);
    }

    .mat-form-field-appearance-outline .mat-form-field-outline {
      color: mat-color($foreground, text, 0.32);
    }

    .mat-table {
      .mat-row {
        //TO BE DEFINED
        //       &.o-table-group-row-level-1 {
        //         font-weight: 900;
        //         background-color: if($is-dark-theme, #464646, #b2b2b2);
        //       }

        //       &.o-table-group-row-level-2 {
        //         font-weight: 800;
        //         background-color: if($is-dark-theme, #575757, #cccccc);
        //       }

        //       &.o-table-group-row-level-3 {
        //         font-weight: 700;
        //         background-color: if($is-dark-theme,#686868, #e8e8e8);
        //       }

        //       &.o-table-group-row-level-4 {
        //         font-weight: 600;
        //         background-color: if($is-dark-theme, #7a7a7a, #f9f9f9);
        //       }
        &:hover:not(.o-table-group-row) {
          cursor: pointer;
          background-color: $table-row-over-background;
        }

        &.selected {
          background: $table-row-selected-background;
        }

        .mat-cell {
          color: mat-color($foreground, base);
        }
      }
    }
  }

  /* FORM */
  .o-form {
    .o-form-toolbar {
      margin-bottom: 24px;

      .o-form-toolbar-header {
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.24);
        background-color: mat-color($background, card);

        .mat-toolbar-tools {
          button.o-form-toolbar-button.o-form-toolbar-back.mat-icon-button {
            margin-right: 32px;
          }

        }
      }
    }
  }

  /* Buttons */

  .mat-dialog-actions button:not([disabled]),
  .o-form .o-form-toolbar button:not([disabled]),
  .o-grid .o-grid-footer button:not([disabled]),
  .o-grid .o-grid-toolbar>button:not([disabled]),
  .o-list .o-list-toolbar>button:not([disabled]),
  .ontimize-table.o-table .o-table-container .o-table-toolbar .buttons button:not([disabled]),
  button.mat-stroked-button:not([disabled]) {

    &.mat-button-base {
      border-color: mat-color($foreground, text, 0.32);
    }

    &.mat-button-base.mat-primary,
    &.mat-button-base.o-button-primary {
      color: mat-color($primary, 500);
      background-color: $background-primary-button;
      border-color: mat-color($foreground, text, 0.32);

      .mat-icon {
        color: mat-color($primary, 500);
      }

      &:hover,
      .mat-button-focus-overlay {
        background-color: $background-hover-primary-button;
        border-color: mat-color($foreground, text, 0.32);
      }

    }

    &.mat-button-base.mat-accent,
    &.mat-button-base.o-button-default {
      color: mat-color($foreground, text);
      border-color: mat-color($foreground, text, 0.32);

      .mat-icon {
        color: mat-color($accent, 500);
      }

      &:hover,
      .mat-button-focus-overlay {
        color: mat-color($accent, 500);
        background-color: $background-hover-accent-button;
        border-color: mat-color($foreground, text, 0.32);
      }
    }

    &.mat-button-base.mat-warn {
      color: mat-color($warn);
      border-color: mat-color($foreground, text, 0.32);

      &:hover {
        background-color: $background-hover-warn-button;
        border-color: mat-color($foreground, text, 0.32);
      }
    }
  }

  .o-button button.mat-stroked-button:not([disabled]).mat-button-base {
    &.mat-accent {
      color: mat-color($accent, 500);
    }
  }

  .o-form .mat-toolbar-tools .o-form-navigation~.o-form-toolbar-button,
  .o-grid .o-grid-toolbar button,
  .o-list .o-list-toolbar button,
  .ontimize-table.o-table .o-table-container .o-table-toolbar .buttons button {
    &.mat-icon-button:not(.mat-menu-trigger) {
      border-color: mat-color($foreground, text, 0.32);
      border-style: solid;
      border-width: 1px;
      border-radius: $border-radius;
      line-height: $button-line-height-width-border;
    }
  }

  .o-form .o-form-toolbar-header .mat-toolbar-tools .o-form-navigation~.o-form-toolbar-button.mat-icon-button:not(.mat-menu-trigger) {
    margin: 0 6px;
  }

  // O-ROW, O-COLUMN
  o-column.o-column,
  o-row.o-row {
    background: mat-color($background, card);
    border-radius: $border-radius;

    .o-container {
      .o-container-title {
        padding: 20px 0;
      }

      >.o-container-header,
      >.o-container-title,
      >.mat-expansion-panel-header {
        border-bottom: none;
        color: mat-color($foreground, title);

        .mat-tab-label,
        .mat-tab-link {
          color: mat-color($foreground, title);
        }
      }

      >.o-container-title,
      >.mat-expansion-panel-header .o-container-title {
        span {
          font: {
            size: mat-font-size($typography, title);
            weight: bold;
          }
        }
      }

      .o-container-scroll {
        &.o-container-gap {
          padding: 12px 16px 16px;
        }
      }
    }
  }

  o-column.o-column.top-separator,
  o-row.o-row.top-separator {
    margin-top: 14px;
  }

  /*background levels */
  .bg-level-0,
  o-column.o-column.bg-level-0,
  o-row.o-row.bg-level-0 {
    background-color: mat-color($background, level-0);
  }

  .bg-level-04,
  o-column.o-column.bg-level-04,
  o-row.o-row.bg-level-04 {
    background-color: mat-color($background, level-04);
  }

  .bg-level-06,
  o-column.o-column.bg-level-06,
  o-row.o-row.bg-level-06 {
    background-color: mat-color($background, level-06);
  }

  .bg-level-08,
  o-column.o-column.bg-level-08,
  o-row.o-row.bg-level-08 {
    background-color: mat-color($background, level-08);
  }

  .bg-level-1,
  o-column.o-column.bg-level-1,
  o-row.o-row.bg-level-1 {
    background-color: mat-color($background, level-1);
  }

  .o-form-content-wrapper,
  .o-form-toolbar {
    &[layout-padding] {
      padding: 0;
    }
  }
}