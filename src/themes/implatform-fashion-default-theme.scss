@import 'node_modules/@angular/material/theming';
// Include non-theme styles for core.
@include mat-core();

//Definition primary and accent palettes
$default-palette: (50: #e8e3f4,
  100: #c5b9e4,
  200: #9f8ad2,
  300: #795bc0,
  400: #5c37b3,
  500: #3f14a5,
  600: #39129d,
  700: #310e93,
  800: #290b8a,
  900: #1b0679,
  A100: #b3a8ff,
  A200: #8775ff,
  A400: #5b42ff,
  A700: #4428ff,
  contrast: (50: #000000,
    100: #000000,
    200: #000000,
    300: #ffffff,
    400: #ffffff,
    500: #ffffff,
    600: #ffffff,
    700: #ffffff,
    800: #ffffff,
    900: #ffffff,
    A100: #000000,
    A200: #000000,
    A400: #ffffff,
    A700: #ffffff,
  ),
);

// Define a theme.
$primary: mat-palette($default-palette);
$accent: mat-palette($default-palette, A100, A200, A400, A700);
$primary-500: mat-color($primary, 500);

/*Application background-color*/
$app-background-color: #eaeaea;
/*Sidenav background-color*/
$sidenav-background-color: #f5f5f5;

// Background palette for light themes.
@function fashion-light-theme-background($mat-theme) {
  $background: map-get($mat-theme, background);
  @return map_merge((level-0: mix($app-background-color, $primary-500, 98%),
      level-04: #f2f2f2,
      level-06: #f6f6f6,
      level-08: #fafafa,
      level-1: white,
      sidenav-overlay: #525252), $background);
}

// Background palette for dark themes.
@function fashion-dark-theme-background($mat-theme) {
  $background: map-get($mat-theme, background);
  @return map_merge((level-0: mix(#171717, $primary-500, 94%),
      level-04: mix(#1E1E1E, $primary-500, 94%),
      level-06: mix(#2C2C2C, $primary-500, 94%),
      level-08: mix(#333333, $primary-500, 94%),
      level-1: mix(#383838, $primary-500, 94%),
      sidenav-overlay: #525252), $background);
}

// Foreground palette for light themes.
@function fashion-light-theme-foreground() {
  @return (base: rgba(black, 0.6),
    divider: rgba(black, 0.12),
    dividers: rgba(black, 0.12),
    disabled: rgba(black, 0.38),
    disabled-button: rgba(black, 0.38),
    disabled-text: rgba(black, 0.38),
    elevation: black,
    hint-text: rgba(black, 0.38),
    secondary-text: rgba(black, 0.54),
    title: rgba(black, 0.87),
    icon: rgba(black, 0.6),
    icons: rgba(black, 0.6),
    text: rgba(black, 0.87),
    slider-min: rgba(black, 0.38),
    slider-off: rgba(black, 0.38),
    slider-off-active: rgba(black, 0.38));
}

// Foreground palette for dark themes.
@function fashion-dark-theme-foreground() {
  @return (base: rgba(white, 0.6),
    divider: rgba(white, 0.12),
    dividers: rgba(white, 0.12),
    disabled: rgba(white, 0.38),
    disabled-button: rgba(white, 0.38),
    disabled-text: rgba(white, 0.38),
    elevation: white,
    hint-text: rgba(white, 0.38),
    secondary-text: rgba(white, 0.54),
    title: rgba(white, 0.87),
    icon: rgba(white, 0.6),
    icons: rgba(white, 0.6),
    text: rgba(white, 0.87),
    slider-min: rgba(white, 0.38),
    slider-off: rgba(white, 0.38),
    slider-off-active: rgba(white, 0.38));
}

// Creates a container object for a light theme to be given to individual component theme mixins.
@function fashion-mat-light-theme($primary, $accent, $warn: mat-palette($mat-red)) {
  $mat-theme: mat-light-theme($primary, $accent, $warn);
  @return (primary: $primary,
    accent: $accent,
    warn: $warn,
    is-dark: false,
    foreground: fashion-light-theme-foreground(),
    background: fashion-light-theme-background($mat-theme));
}

// Creates a container object for a dark theme to be given to individual component theme mixins.
@function fashion-mat-dark-theme($primary, $accent, $warn: mat-palette($mat-red)) {
  $mat-theme: mat-dark-theme($primary, $accent, $warn);
  @return (primary: $primary,
    accent: $accent,
    warn: $warn,
    is-dark: true,
    foreground: fashion-dark-theme-foreground(),
    background: fashion-dark-theme-background($mat-theme));
}

/* Light theme */
$theme: fashion-mat-light-theme($primary, $accent);
/* Dark theme */
$dark-theme: fashion-mat-dark-theme($primary, $accent);